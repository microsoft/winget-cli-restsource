# Publishes winget rest source powershell module.

trigger: none

# parameters are shown up in ADO UI in a build queue time
parameters:
- name: moduleVersion
  displayName: 'Version of the module'
  type: string

variables:
  moduleName: Microsoft.WinGet.RestSource
  sourceArtifactName: WinGet.RestSource-WinGet.PowerShell.Source
  downloadRoot: $(Pipeline.Workspace)\buildRelease\$(sourceArtifactName)

  # Docker image which is used to build the project
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest'

resources:
  pipelines:
  - pipeline: buildRelease
    source: 'winget-cli-restsource Build_Test'
    trigger: none

  repositories:
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/Microsoft.Official.yml@templates
  parameters:
    platform:
      name: 'windows_undocked'

    git:
      fetchTags: false

    stages:
      - stage: Prepare
        jobs:
        - job: Prepare_Sign
          displayName: Prepare and sign
          pool:
            type: windows
          variables:
            ob_outputDirectory: $(Build.ArtifactStagingDirectory)/$(moduleName)

          steps:
          - task: NuGetToolInstaller@1
            displayName: 'Use NuGet 6.x'
            inputs:
              versionSpec: 6.x

          - download: buildRelease
            displayName: Download artifacts to sign
            artifact: $(sourceArtifactName)
            patterns: '**'

          - pwsh: |
              $psd1File = "$(downloadRoot)\Microsoft.WinGet.RestSource.psd1"

              # This needs to be modified when the build sets the correct version number.
              $manifestContent = (Get-Content -Path $psd1File -Raw)
              if ($manifestContent -notlike "*ModuleVersion = '0.1.0'*")
              {
                  throw "Expected version before changes is 0.1.0"
              }

              # Set module version
              $manifestContent = $manifestContent -replace "ModuleVersion = '0.1.0'", "ModuleVersion = '${{ parameters.moduleVersion }}'"

              # Set release as needed in the future
              # $manifestContent = $manifestContent -replace "Prerelease = 'alpha'", "#Prerelease = 'alpha'"

              Set-Content -Path $psd1File -Value $manifestContent

              Get-Content -Path $psd1File -Raw
            displayName: 'PowerShell: Prepare Microsoft.WinGet.RestSource Module'

          - task: onebranch.pipeline.signing@1
            displayName: 'Sign 1st party module files'
            inputs:
              command: 'sign'
              signing_profile: 'external_distribution'
              search_root: '$(downloadRoot)'
              files_to_sign: |
                Microsoft.WinGet.RestSource.psd1
                Microsoft.WinGet.RestSource.psm1
                Library/*.ps1
                Library/WinGet.RestSource.PowershellSupport/Microsoft.WinGet.PowershellSupport.dll
                Library/WinGet.RestSource.PowershellSupport/Microsoft.WinGet.RestSource.Utils.dll

          - task: onebranch.pipeline.signing@1
            displayName: 'Sign 3rd party module files'
            inputs:
              command: 'sign'
              cp_code: '135020002' # CP-231522 - Microsoft 3rd Party Application Component (SHA2)
              search_root: '$(downloadRoot)'
              files_to_sign: |
                Library/WinGet.RestSource.PowershellSupport/YamlDotNet.dll

          - task: CopyFiles@2
            displayName: Copy files to be published to staging directory
            inputs:
              SourceFolder: $(downloadRoot)
              TargetFolder: $(Build.ArtifactStagingDirectory)/$(moduleName)
              Contents: |
                *.psm1
                *.psd1
                Library/**
                Data/**

      - stage: Publish
        displayName: Manual Approval
        dependsOn: Prepare
        jobs:
        - job: Wait
          displayName: Wait for manual approval
          pool:
            type: agentless

          timeoutInMinutes: 1440 # job times out in 1 day

          steps:
            - task: ManualValidation@0
              timeoutInMinutes: 1440 # task times out in 1 day

        - job: PublishToGallery
          dependsOn: Wait
          pool:
            type: windows
          variables:
            # Not used, but required by the pipeline to be defined
            ob_outputDirectory: $(Build.ArtifactStagingDirectory)

          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: drop_Prepare_Prepare_Sign
              targetPath: $(System.DefaultWorkingDirectory)/ModuleToPublish/$(moduleName)
              itemPattern: |
                *.psm1
                *.psd1
                Library/**
                Data/**

          - pwsh: |
              $moduleFolder = "$(System.DefaultWorkingDirectory)/ModuleToPublish/$(moduleName)"
              Get-ChildItem -Path $moduleFolder -Recurse
              $moduleFolderPath = (Resolve-Path $moduleFolder).Path
              Publish-Module -Path $moduleFolderPath -Repository PSGallery -NuGetApiKey $(PowerShellNugetAPIKey) -verbose
            displayName: 'Publish $(moduleName)'
