openapi: 3.0.1
info:
  version: 0.1.0
  title: Open Windows Catalog API
  description: This is the API for the Open Windows Catalog.
  contact:
    name: Winget Feedback
    email: winget-feedback@microsoft.com

paths:
  # Package API Calls
  /packages:

    post:
      summary: Add Package Metadata
      tags:
        - Packages
      description: This will create a new package in the repository with its associated metadata.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/packageRequestBody'
      responses:
        201:
          description: Successfully added a package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/GenericError'

    get:
      summary: Get Package Metadata
      tags:
        - Packages
        - Get
      description: This will retrieve a set of packages.
      responses:
        200:
          description: Successfully retrieved a list of packages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/packageSchema'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

  /packages/{packageId}:
    parameters:
      - $ref: '#/components/parameters/packageId'

    put:
      summary: Replace Package Metadata
      tags:
        - Packages
      description: This will replace a package in the repository.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/packageRequestBody'
      responses:
        201:
          description: Successfully updated a package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

    delete:
      summary: Delete a Package
      tags:
        - Packages
      description: This will delete a package in the repository.
      security: 
        - ApiKeyAuthentication: []
      responses:
        204:
          description: Successfully deleted a package.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

    get:
      summary: Get Package Metadata
      tags:
        - Packages
        - Get
      description: This will retrieve a set of packages.
      responses:
        200:
          description: Successfully retrieved a package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/packageSchema'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

  # Version API Calls
  /packages/{packageId}/versions:
    parameters:
      - $ref: '#/components/parameters/packageId'

    post:
      summary: Add Version Metadata
      tags:
        - Versions
      description: This will create a new version in the repository with its associated metadata.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/versionRequestBody'
      responses:
        201:
          description: Successfully added a version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/GenericError'

    get:
      summary: Get Version Metadata
      tags:
        - Versions
        - Get
      description: This will retrieve a set of versions.
      responses:
        200:
          description: Successfully retrieved a list of versions.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/versionSchema'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

  /packages/{packageId}/versions/{version}:
    parameters:
      - $ref: '#/components/parameters/packageId'
      - $ref: '#/components/parameters/version'

    put:
      summary: Replace Version Metadata
      tags:
        - Versions
      description: This will replace a version in the repository.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/versionRequestBody'
      responses:
        201:
          description: Successfully updated a version.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

    delete:
      summary: Delete a Version
      tags:
        - Versions
      description: This will delete a version in the repository.
      security: 
        - ApiKeyAuthentication: []
      responses:
        204:
          description: Successfully deleted a version.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'
  
    get:
      summary: Get Version Metadata
      tags:
        - Versions
        - Get
      description: This will retrieve a version.
      responses:
        200:
          description: Successfully retrieved a package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/versionSchema'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

  # Installer API Calls
  /packages/{packageId}/versions/{version}/installers:
    parameters:
      - $ref: '#/components/parameters/packageId'
      - $ref: '#/components/parameters/version'

    post:
      summary: Add Installer Metadata
      tags:
        - Installers
      description: This will create a new Installer in the repository with its associated metadata.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/installerRequestBody'
      responses:
        201:
          description: Successfully added an installer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installerSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/GenericError'

    get:
      summary: Get Installer Metadata
      tags:
        - Installers
        - Get
      description: This will retrieve a set of installers.
      responses:
        200:
          description: Successfully retrieved a list of installers.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/installerSchema'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

  /packages/{packageId}/versions/{version}/installers/{installerKey}:
    parameters:
      - $ref: '#/components/parameters/packageId'
      - $ref: '#/components/parameters/version'
      - $ref: '#/components/parameters/installerKey'

    put:
      summary: Replace Installer Metadata
      tags:
        - Installers
      description: This will replace an installer in the repository.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/installerRequestBody'
      responses:
        201:
          description: Successfully updated an installer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installerSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

    delete:
      summary: Delete an Installer
      tags:
        - Installers
      description: This will delete a version in the repository.
      security: 
        - ApiKeyAuthentication: []
      responses:
        204:
          description: Successfully deleted a version.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

    get:
      summary: Get Installer Metadata
      tags:
        - Installers
        - Get
      description: This will retrieve an installer.
      responses:
        200:
          description: Successfully retrieved a package.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/installerSchema'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'
  
  /manifests:
    post:
      summary: This creates all subcomponents contained in the logical representation of a manifest
      tags:
        - Manifests
      description: This will create all subcomponents contained in the logical representation of a manifest.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/manifestRequestBody'
      responses:
        201:
          description: Successfully added multiple components.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/manifestSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/GenericError'

    get:
      parameters:
        - $ref: '#/components/parameters/query'
      summary: This returns a manifest
      tags:
        - Manifests
        - Get
      description: This will retrieve a set of manifests.
      responses:
        200:
          description: Successfully retrieved a list of packages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/manifestSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/NotFoundError'
        default:
          $ref: '#/components/responses/GenericError'

    put:
      summary: This updates all subcomponents contained in the logical representation of a manifest
      tags:
        - Manifests
      description: This will update all subcomponents contained in the logical representation of a manifest.
      security: 
        - ApiKeyAuthentication: []
      requestBody:
        $ref: '#/components/requestBodies/manifestRequestBody'
      responses:
        201:
          description: Successfully added multiple components.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/manifestSchema'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        409:
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/GenericError'

# Reusable Components for API
components:

  # Security Components
  securitySchemes:
    ApiKeyAuthentication:
      type: apiKey
      in: query
      name: code

  # API Schemas
  schemas:

    # Primary Keys
    packageId:
      description: Model for the Package Id consisting of publisher and package name.
      properties:
        packageId:
          type: string
          example: git.git

    version:
      description: Version of a software Package.
      properties:
        version:
          type: string
          example: 1.0.0

    installerKey:
      description: Key that represents an installer within the context of a specific version.
      properties:
        installerKey:
          type: string
          example: 1

    # Default Locale
    defaultLocale:
      description: Model containing Package Primary-Keys.
      properties:
        defaultLocale:
          type: string
          example: en-us

    # Version Fields
    versionFields:
      description: Model containing Version Fields.
      properties:
        name:
          type: string
          example: #example#
        publisher:
          type: string
          example: #example#
        appMoniker:
          type: string
          example: #example#
        channel:
          type: string
          example: #example#
        author:
          type: string
          example: #example#
        license:
          type: string
          example: #example#
        minOSVersion:
          type: string
          example: #example#
        tags:
          type: string
          example: #example#
        commands:
          type: string
          example: #example#
        protocols:
          type: string
          example: #example#
        fileExtensions:
          type: string
          example: #example#
        installerType:
          type: string
          example: #example#
        description:
          type: string
          example: #example#
        homePage:
          type: string
          example: #example#
        licenseUrl:
          type: string
          example: #example#
        switches:
          type: string
          example: #example#

    # Version Locale
    versionLocale:
      description: Model containing Version Locale.
      properties:
        language:
          type: string
          example: #example#
        description:
          type: string
          example: #example#
        homepage:
          type: string
          example: #example#
        licenseUrl:
          type: string
          example: #example#

    # Installer Fields
    installerFields:
      description: Model containing Installer Fields.
      properties:
        arch:
          type: string
          example: #example#
        url:
          type: string
          example: #example#
        sha256:
          type: string
          example: #example#
        signatureSha256:
          type: string
          example: #example#
        language:
          type: string
          example: #example#
        scope:
          type: string
          example: #example#
        installerType:
          type: string
          example: #example#
        productId:
          type: string
          example: #example#

    # Switches
    switchesFields:
      description: Model containing Switches.
      properties:
        custom:
          type: string
          example: #example#
        silent:
          type: string
          example: #example#
        silentWithProgress:
          type: string
          example: #example#
        language:
          type: string
          example: #example#
        log:
          type: string
          example: #example#
        installLocation:
          type: string
          example: #example#

    # Package Schema        
    packageSchema:
      description: Model containing Package Schema.
      allOf:
        - $ref: '#/components/schemas/packageId'
        - $ref: '#/components/schemas/defaultLocale'
    
    # Version Schema        
    versionSchema:
      description: Model containing Package Schema.
      allOf:
        - $ref: '#/components/schemas/version'
        - $ref: '#/components/schemas/versionFields'
        - type: object
          properties:
            localization:
              type: array
              items:
                $ref: '#/components/schemas/versionLocale'

    # Installer Schema        
    installerSchema:
      description: Model containing Package Schema.
      allOf:
        - $ref: '#/components/schemas/installerKey'
        - $ref: '#/components/schemas/installerFields'
        - type: object
          properties:
            switches:
              type: array
              items:
                $ref: '#/components/schemas/switchesFields'

    # Manifest Schema
    manifestSchema: 
      description: Model containing manifest schema.
      allOf:
        - $ref: '#/components/schemas/packageSchema'
        - type: object
          properties:
            versions:
              type: array
              items: 
                allOf:
                  - $ref: '#/components/schemas/versionSchema'
                  - type: object
                    properties:
                      installers:
                        type: array
                        items:
                          $ref: '#/components/schemas/installerSchema'

    # Misc Schemas
    error:
      description: A schema for a generic error.
      properties:
        errorCode:
          type: integer
        errorMessage:
          type: string
      required: 
        - errorCode
        - errorMessage

  # Parameters
  parameters:
    packageId:
      name: packageId
      in: path
      description: This is the package id.
      required: true
      schema:
        type: string
        example: git.git

    version:
      name: version
      in: path
      description: This is the version.
      required: true
      schema:
        type: string
        example: 1.0.0

    installerKey:
      name: installerKey
      in: path
      description: This is the installer key.
      required: true
      schema:
        type: string
        example: 1

    query:
      name: query
      in: query
      description: This is a JSON representation of a query to be executed and converted to a Base64 string.
      required: false
      schema:
        type: string
        example: eyJwYWNrYWdlSWRTdGFydHNXaXRoIjoiZ2l0In0=

  # Request Bodies
  requestBodies:
    packageRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/packageSchema'

    versionRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/versionSchema'

    installerRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/installerSchema'

    manifestRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/manifestSchema'

  responses:
    UnauthorizedError:
      description: API key is missing or invalid.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/error'

    NotFoundError:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/error'

    Conflict:
      description: A conflict exists with the resource.      
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/error'

    GenericError:
      description: An Error Occurred.
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/error'

tags: 
  - name: Packages
    description: Everything about packages.
  - name: Versions
    description: Everything about versions.
  - name: Installers
    description: Everything about installers.
  - name: Manifests
    description: Manifests are a collated set of data to aid clients in search and consumption of the data sets.
  - name: Get
    description: All Get Calls.
